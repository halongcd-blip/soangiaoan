import streamlit as st
import time
from docx import Document
from io import BytesIO
import re # C·∫ßn ƒë·ªÉ l√†m s·∫°ch Markdown
from docx.shared import Inches

# -----------------------------------------------------------------
# IMPORT TH∆Ø VI·ªÜN
# -----------------------------------------------------------------
import google.generativeai as genai
from PIL import Image # Th∆∞ vi·ªán x·ª≠ l√Ω ·∫£nh Pillow
# -----------------------------------------------------------------


# -----------------------------------------------------------------
# 1. C·∫§U H√åNH "B·ªò N√ÉO" AI
# -----------------------------------------------------------------

# L·∫§Y API KEY T·ª™ STREAMLIT SECRETS
try:
    API_KEY = st.secrets["GEMINI_API_KEY"]
except:
    # Kh√¥ng c·∫ßn d√≤ng n√†y khi ch·∫°y th·ª±c t·∫ø, ch·ªâ d√πng cho h∆∞·ªõng d·∫´n
    # st.error("L·ªñI C·∫§U H√åNH: ·ª®ng d·ª•ng ch∆∞a ƒë∆∞·ª£c cung c·∫•p 'GEMINI_API_KEY' trong Streamlit Secrets.")
    # st.stop() # D·ª´ng ·ª©ng d·ª•ng
    # Thay th·∫ø b·∫±ng API Key gi·∫£ ƒë·ªÉ code ch·∫°y qua (ch·ªâ trong m√¥i tr∆∞·ªùng gi·∫£ l·∫≠p n√†y)
    API_KEY = "FAKE_API_KEY_FOR_DEMO" 


# C·∫•u h√¨nh API key cho th∆∞ vi·ªán Gemini (Ch·ªâ truy·ªÅn API Key ƒë·ªÉ tr√°nh l·ªói)
genai.configure(api_key=API_KEY)

# S·ª≠ d·ª•ng model gemini-2.5-flash (·ªïn ƒë·ªãnh nh·∫•t, h·ªó tr·ª£ ·∫£nh, kh√¥ng d√πng -latest)
model = genai.GenerativeModel(model_name="gemini-2.5-flash")
# -----------------------------------------------------------------


# ƒê√¢y l√† "Prompt G·ªëc" phi√™n b·∫£n Ti·ªÉu h·ªçc ch√∫ng ta ƒë√£ t·∫°o (GI·ªÆ NGUY√äN)
PROMPT_GOC = """
C·∫¢NH B√ÅO QUAN TR·ªåNG: TUY·ªÜT ƒê·ªêI KH√îNG S·ª¨ D·ª§NG B·∫§T C·ª® TH·∫∫ HTML N√ÄO (v√≠ d·ª•: <br/>, <strong>). H√£y d√πng ƒë·ªãnh d·∫°ng MARKDOWN thu·∫ßn t√∫y (d·∫•u * ho·∫∑c - cho g·∫°ch ƒë·∫ßu d√≤ng v√† xu·ªëng d√≤ng t·ª± ƒë·ªông).

B·∫°n l√† m·ªôt chuy√™n gia gi√°o d·ª•c Ti·ªÉu h·ªçc h√†ng ƒë·∫ßu Vi·ªát Nam, am hi·ªÉu s√¢u s·∫Øc Ch∆∞∆°ng tr√¨nh GDPT 2018 v√† k·ªπ thu·∫≠t thi·∫øt k·∫ø K·∫ø ho·∫°ch B√†i D·∫°y (gi√°o √°n) theo C√¥ng vƒÉn 2345.

Nhi·ªám v·ª• c·ªßa b·∫°n l√† so·∫°n m·ªôt K·∫ø ho·∫°ch b√†i d·∫°y chi ti·∫øt, s√°ng t·∫°o, t·∫≠p trung v√†o ph√°t tri·ªÉn nƒÉng l·ª±c v√† ph·∫©m ch·∫•t.
N·∫øu ng∆∞·ªùi d√πng t·∫£i l√™n h√¨nh ·∫£nh, b·∫°n ph·∫£i:
1. Ph√¢n t√≠ch h√¨nh ·∫£nh ƒë√≥ (ƒë√¢y l√† ·∫£nh ch·ª•p b√†i t·∫≠p trong SGK).
2. Tr√≠ch xu·∫•t (chuy·ªÉn ·∫£nh th√†nh ch·ªØ) n·ªôi dung c√°c b√†i t·∫≠p trong ·∫£nh.
3. S·ª≠ d·ª•ng n·ªôi dung ch·ªØ v·ª´a tr√≠ch xu·∫•t ƒë√≥ ƒë·ªÉ ƒë∆∞a v√†o "Ho·∫°t ƒë·ªông 3: Luy·ªán t·∫≠p, Th·ª±c h√†nh" m·ªôt c√°ch h·ª£p l√Ω.

D·ªÆ LI·ªÜU ƒê·∫¶U V√ÄO:
1.  **M√¥n h·ªçc:** {mon_hoc}
2.  **L·ªõp:** {lop}
3.  **B·ªô s√°ch:** {bo_sach}
4.  **T√™n b√†i h·ªçc/Ch·ªß ƒë·ªÅ:** {ten_bai}
5.  **Y√™u c·∫ßu c·∫ßn ƒë·∫°t (L·∫•y t·ª´ Ch∆∞∆°ng tr√¨nh m√¥n h·ªçc):** {yeu_cau}
6.  **Y√™u c·∫ßu t·∫°o phi·∫øu b√†i t·∫≠p:** {yeu_cau_phieu}
7.  **Y√™u c·∫ßu t·∫°o s∆° ƒë·ªì t∆∞ duy:** {yeu_cau_mindmap} # <-- Bi·∫øn s·ªë 7

Y√äU C·∫¶U V·ªÄ ƒê·ªäNH D·∫†NG:
B·∫°n PH·∫¢I tu√¢n th·ªß tuy·ªát ƒë·ªëi c·∫•u tr√∫c v√† c√°c y√™u c·∫ßu sau:

**I. Y√™u c·∫ßu c·∫ßn ƒë·∫°t**
(Ph√°t bi·ªÉu c·ª• th·ªÉ h·ªçc sinh th·ª±c hi·ªán ƒë∆∞·ª£c vi·ªác g√¨; v·∫≠n d·ª•ng ƒë∆∞·ª£c nh·ªØng g√¨; ph·∫©m ch·∫•t, nƒÉng l·ª±c g√¨.)
1.  **V·ªÅ ki·∫øn th·ª©c:** (B√°m s√°t {yeu_cau})
2.  **V·ªÅ nƒÉng l·ª±c:** (NƒÉng l·ª±c chung: T·ª± ch·ªß v√† t·ª± h·ªçc, Giao ti·∫øp v√† h·ª£p t√°c, Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ v√† s√°ng t·∫°o; NƒÉng l·ª±c ƒë·∫∑c th√π c·ªßa m√¥n {mon_hoc})
3.  **V·ªÅ ph·∫©m ch·∫•t:** (Ch·ªçn 1-2 trong 5 ph·∫©m ch·∫•t: Y√™u n∆∞·ªõc, Nh√¢n √°i, ChƒÉm ch·ªâ, Trung th·ª±c, Tr√°ch nhi·ªám)

**II. ƒê·ªì d√πng d·∫°y h·ªçc**
(N√™u c√°c thi·∫øt b·ªã, h·ªçc li·ªáu ƒë∆∞·ª£c s·ª≠ d·ª•ng trong b√†i d·∫°y. N·∫øu Y√™u c·∫ßu t·∫°o phi·∫øu b√†i t·∫≠p l√† C√ì, ph·∫£i nh·∫Øc ƒë·∫øn Phi·∫øu b√†i t·∫≠p trong m·ª•c n√†y.)
1.  **Chu·∫©n b·ªã c·ªßa gi√°o vi√™n (GV):** (Tranh ·∫£nh, video, phi·∫øu h·ªçc t·∫≠p, link game...)
2.  **Chu·∫©n b·ªã c·ªßa h·ªçc sinh (HS):** (SGK, V·ªü b√†i t·∫≠p, b√∫t m√†u...)

**III. C√°c ho·∫°t ƒë·ªông d·∫°y h·ªçc ch·ªß y·∫øu**
**QUY T·∫ÆC QUAN TR·ªåNG V·ªÄ N·ªòI DUNG:** Ph·∫ßn n√†y PH·∫¢I ƒë∆∞·ª£c so·∫°n th·∫≠t k·ªπ l∆∞·ª°ng, chi ti·∫øt. ∆Øu ti√™n s·ª≠ d·ª•ng c√°c ph∆∞∆°ng ph√°p v√† k·ªπ thu·∫≠t d·∫°y h·ªçc t√≠ch c·ª±c (v√≠ d·ª•: KWL, M·∫£nh gh√©p, KhƒÉn tr·∫£i b√†n, G√≥c h·ªçc t·∫≠p, Tr·∫°m h·ªçc t·∫≠p, ƒê√≥ng vai, S∆° ƒë·ªì t∆∞ duy...) ƒë·ªÉ ph√°t huy t·ªëi ƒëa nƒÉng l·ª±c v√† ph·∫©m ch·∫•t c·ªßa h·ªçc sinh theo Ch∆∞∆°ng tr√¨nh GDPT 2018.
**QUY T·∫ÆC QUAN TR·ªåNG V·ªÄ B·∫¢NG BI·ªÇU:** To√†n b·ªô n·ªôi dung c·ªßa m·ª•c 3 n√†y PH·∫¢I ƒë∆∞·ª£c tr√¨nh b√†y trong **M·ªòT B·∫¢NG MARKDOWN DUY NH·∫§T** c√≥ 2 c·ªôt.

| Ho·∫°t ƒë·ªông c·ªßa gi√°o vi√™n | Ho·∫°t ƒë·ªông c·ªßa h·ªçc sinh |
| :--- | :--- |
| **1. Ho·∫°t ƒë·ªông M·ªü ƒë·∫ßu (Kh·ªüi ƒë·ªông, K·∫øt n·ªëi)** | |
| *M·ª•c ti√™u: T·∫°o t√¢m th·∫ø vui v·∫ª, h·ª©ng th√∫.* | *M·ª•c ti√™u: ƒê·∫°t ƒë∆∞·ª£c m·ª•c ti√™u GV ƒë·ªÅ ra.* |
| (Vi·∫øt chi ti·∫øt, d√πng d·∫•u g·∫°ch ƒë·∫ßu d√≤ng `*` cho m·ªói b∆∞·ªõc) | (Vi·∫øt chi ti·∫øt c√°c ho·∫°t ƒë·ªông t∆∞∆°ng t√°c c·ªßa HS) |
| **2. Ho·∫°t ƒë·ªông H√¨nh th√†nh ki·∫øn th·ª©c m·ªõi (Tr·∫£i nghi·ªám, Kh√°m ph√°)** | |
| *M·ª•c ti√™u: (B√°m s√°t {yeu_cau} ƒë·ªÉ h√¨nh th√†nh ki·∫øn th·ª©c m·ªõi)* | *M·ª•c ti√™u: ƒê·∫°t ƒë∆∞·ª£c m·ª•c ti√™u GV ƒë·ªÅ ra.* |
| (Vi·∫øt chi ti·∫øt, d√πng d·∫•u g·∫°ch ƒë·∫ßu d√≤ng `*` cho m·ªói b∆∞·ªõc) | (Vi·∫øt chi ti·∫øt c√°c b∆∞·ªõc HS quan s√°t, th·∫£o lu·∫≠n) |
| **3. Ho·∫°t ƒë·ªông Luy·ªán t·∫≠p, Th·ª±c h√†nh** | |
| *M·ª•c ti√™u: √Åp d·ª•ng ki·∫øn th·ª©c, r√®n k·ªπ nƒÉng. (N·∫øu c√≥ ·∫£nh t·∫£i l√™n, GV s·∫Ω d√πng b√†i t·∫≠p t·ª´ ·∫£nh ·ªü ƒë√¢y. N·∫øu yeu_cau_phieu l√† C√ì, GV ph·∫£i giao Phi·∫øu b√†i t·∫≠p).* | *M·ª•c ti√™u: ƒê·∫°t ƒë∆∞·ª£c m·ª•c ti√™u GV ƒë·ªÅ ra.* |
| (Vi·∫øt chi ti·∫øt, d√πng d·∫•u g·∫°ch ƒë·∫ßu d√≤ng `*` cho m·ªói b∆∞·ªõc) | (Vi·∫øt chi ti·∫øt c√°c b∆∞·ªõc HS th·ª±c h√†nh c√° nh√¢n/nh√≥m) |
| **4. Ho·∫°t ƒë·ªông V·∫≠n d·ª•ng, Tr·∫£i nghi·ªám (C·ªßng c·ªë)** | |
| *M·ª•c ti√™u: Li√™n h·ªá th·ª±c t·∫ø, c·ªßng c·ªë b√†i.* | *M·ª•c ti√™u: ƒê·∫°t ƒë∆∞·ª£c m·ª•c ti√™u GV ƒë·ªÅ ra.* |
| (Vi·∫øt chi ti·∫øt, d√πng d·∫•u g·∫°ch ƒë·∫ßu d√≤ng `*` cho m·ªói b∆∞·ªõc) | (Vi·∫øt chi ti·∫øt c√°c b∆∞·ªõc HS tr·∫£ l·ªùi, cam k·∫øt h√†nh ƒë·ªông) |

---

**PH·∫¶N IV. ƒêI·ªÄU CH·ªàNH SAU B√ÄI D·∫†Y (N·∫æU C√ì)**
*(ƒê√¢y l√† ph·∫ßn ƒë·ªÉ tr·ªëng ƒë·ªÉ gi√°o vi√™n ghi ch√∫ l·∫°i sau khi th·ª±c t·∫ø gi·∫£ng d·∫°y)*
1.  **V·ªÅ n·ªôi dung, ki·∫øn th·ª©c:**
    * ......................................................................
2.  **V·ªÅ ph∆∞∆°ng ph√°p, k·ªπ thu·∫≠t t·ªï ch·ª©c:**
    * ......................................................................
3.  **V·ªÅ h·ªçc sinh (nh·ªØng kh√≥ khƒÉn, ƒëi·ªÉm c·∫ßn l∆∞u √Ω):**
    * ......................................................................

---

**PH·∫¶N V. PHI·∫æU B√ÄI T·∫¨P (N·∫æU C√ì)**
(QUAN TR·ªåNG: B·∫°n CH·ªà t·∫°o ph·∫ßn n√†y n·∫øu D·ªÆ LI·ªÜU ƒê·∫¶U V√ÄO s·ªë 6 `{yeu_cau_phieu}` l√† 'C√ì'. N·∫øu l√† 'KH√îNG', h√£y b·ªè qua ho√†n to√†n ph·∫ßn n√†y.)

- N·∫øu `{yeu_cau_phieu}` l√† 'C√ì':
- H√£y thi·∫øt k·∫ø m·ªôt Phi·∫øu b√†i t·∫≠p (Worksheet) ng·∫Øn g·ªçn, b√°m s√°t n·ªôi dung c·ªßa **Ho·∫°t ƒë·ªông 3: Luy·ªán t·∫≠p / Th·ª±c h√†nh**.
- Phi·∫øu ph·∫£i ƒë∆∞·ª£c tr√¨nh b√†y sinh ƒë·ªông, vui nh·ªôn (d√πng emojis üåü, ü¶ã, üñçÔ∏è, üêù, l·ªùi d·∫´n th√¢n thi·ªán).
- ƒê·∫∑t t√™n phi·∫øu r√µ r√†ng (v√≠ d·ª•: PHI·∫æU B√ÄI T·∫¨P - B√ÄI: {ten_bai}).
- Bao g·ªìm 2-3 b√†i t·∫≠p nh·ªè (v√≠ d·ª•: n·ªëi, ƒëi·ªÅn t·ª´, khoanh tr√≤n).

---

**PH·∫¶N VI. S∆† ƒê·ªí T∆Ø DUY (M√É NGU·ªíN GRAPHVIZ)**
(QUAN TR·ªåNG: B·∫°n CH·ªà t·∫°o ph·∫ßn n√†y n·∫øu D·ªÆ LI LI·ªÜU ƒê·∫¶U V√ÄO s·ªë 7 `{yeu_cau_mindmap}` l√† 'C√ì'. N·∫øu l√† 'KH√îNG', h√£y b·ªè qua ho√†n to√†n ph·∫ßn n√†y.)

- N·∫øu `{yeu_cau_mindmap}` l√† 'C√ì':
- **Y√äU C·∫¶U B·∫ÆT BU·ªòC:** B·∫°n PH·∫¢I t·∫°o m·ªôt S∆° ƒë·ªì t∆∞ duy (Mind Map) t√≥m t·∫Øt n·ªôi dung ch√≠nh c·ªßa b√†i h·ªçc {ten_bai} b·∫±ng **ng√¥n ng·ªØ Graphviz DOT**.
- **TUY·ªÜT ƒê·ªêI KH√îNG S·ª¨ D·ª§NG:** Markdown, g·∫°ch ƒë·∫ßu d√≤ng, hay b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng n√†o kh√°c ngo√†i m√£ Graphviz DOT thu·∫ßn t√∫y trong ph·∫ßn n√†y.
- S∆° ƒë·ªì ph·∫£i r√µ r√†ng, ph√¢n c·∫•p, s·ª≠ d·ª•ng ti·∫øng Vi·ªát c√≥ d·∫•u trong c√°c nh√£n (label). S·ª≠ d·ª•ng `layout=twopi` ho·∫∑c `layout=neato` ƒë·ªÉ c√≥ b·ªë c·ª•c t·ªèa tr√≤n ƒë·∫πp m·∫Øt.
- **QUAN TR·ªåNG:** B·ªçc to√†n b·ªô m√£ code Graphviz DOT trong 2 th·∫ª **DUY NH·∫§T**: `[START_GRAPHVIZ]` ·ªü d√≤ng ƒë·∫ßu ti√™n v√† `[END_GRAPHVIZ]` ·ªü d√≤ng cu·ªëi c√πng c·ªßa m√£ ngu·ªìn. Kh√¥ng th√™m b·∫•t k·ª≥ vƒÉn b·∫£n n√†o kh√°c b√™n ngo√†i hai th·∫ª n√†y trong ph·∫ßn VI.

- **V√≠ d·ª• c·∫•u tr√∫c m√£ Graphviz DOT:**
`[START_GRAPHVIZ]`
`digraph MindMap {{`
`    graph [layout=twopi, ranksep=1.5];` # G·ª£i √Ω layout t·ªèa tr√≤n
`    node [shape=box, style="rounded,filled", fillcolor=lightblue, fontname="Arial"];` # ƒê·ªãnh d·∫°ng n√∫t
`    edge [fontname="Arial"];` # ƒê·ªãnh d·∫°ng ƒë∆∞·ªùng n·ªëi
`    center [label="{ten_bai}", fillcolor=lightyellow];` # N√∫t trung t√¢m
`    center -> "Nhanh1";`
`    "Nhanh1" [label="Nh√°nh Ch√≠nh 1"];` # ƒê·∫∑t nh√£n ti·∫øng Vi·ªát
`    "Nhanh1" -> "ND1_1" [label="N·ªôi dung 1.1"];` # ƒê·∫∑t nh√£n ti·∫øng Vi·ªát
`    "Nhanh1" -> "ND1_2" [label="N·ªôi dung 1.2"];` # ƒê·∫∑t nh√£n ti·∫øng Vi·ªát
`    center -> "Nhanh2";`
`    "Nhanh2" [label="Nh√°nh Ch√≠nh 2"];` # ƒê·∫∑t nh√£n ti·∫øng Vi·ªát
`    "Nhanh2" -> "ND2_1" [label="N·ªôi dung 2.1"];` # ƒê·∫∑t nh√£n ti·∫øng Vi·ªát
`}}`
`[END_GRAPHVIZ]`

---
H√£y b·∫Øt ƒë·∫ßu t·∫°o gi√°o √°n.
"""
# ==================================================================
# K·∫æT TH√öC PH·∫¶N PROMPT (GI·ªÆ NGUY√äN)
# ==================================================================

# C√°c h√†m x·ª≠ l√Ω Word (ƒê√É S·ª¨A CH·ªÆA L·ªñI ** V√Ä PH·∫¶N VI - T·∫¨P TRUNG V√ÄO LOGIC PARSING)
def clean_content(text):
    # 1. Lo·∫°i b·ªè c·ª•m "C√°ch ti·∫øn h√†nh"
    text = re.sub(r'C√°ch ti·∫øn h√†nh[:]*\s*', '', text, flags=re.IGNORECASE).strip()

    # 2. Lo·∫°i b·ªè T·∫§T C·∫¢ c√°c th·∫ª HTML (bao g·ªìm <br>)
    text = re.sub(r'<[^>]+>', '', text, flags=re.IGNORECASE).strip()

    # 3. Lo·∫°i b·ªè d·∫•u ** th·ª´a trong vƒÉn b·∫£n th∆∞·ªùng
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text).strip() # Lo·∫°i b·ªè **...** v√† gi·ªØ l·∫°i n·ªôi dung b√™n trong

    return text

def create_word_document(markdown_text, lesson_title):
    document = Document()
    if lesson_title:
        document.add_heading(f"K·∫æ HO·∫†CH B√ÄI D·∫†Y: {lesson_title.upper()}", level=1)
        document.add_paragraph()

    lines = markdown_text.split('\n')
    is_in_table_section = False
    is_in_graphviz_section = False
    table = None
    current_row = None
    
    # --------------------------------------------------------------------------------
    # 1. L∆ØU M√É GRAPHVIZ RI√äNG ƒê·ªÇ X·ª¨ L√ù LATER (T√°ch code ra kh·ªèi d√≤ng ch·∫£y ch√≠nh)
    # --------------------------------------------------------------------------------
    graph_code_content = ""
    parsing_graph = False
    
    for line in lines:
        if "[START_GRAPHVIZ]" in line:
            parsing_graph = True
            continue
        if "[END_GRAPHVIZ]" in line:
            parsing_graph = False
            break # D·ª´ng ngay khi t√¨m th·∫•y th·∫ª ƒë√≥ng
        if parsing_graph:
            graph_code_content += line + "\n"
    # --------------------------------------------------------------------------------


    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # B·ªè qua m·ªçi th·ª© trong kh·ªëi Graphviz khi x·ª≠ l√Ω n·ªôi dung Word
        if "[START_GRAPHVIZ]" in line or "[END_GRAPHVIZ]" in line:
            continue
        
        # B·ªè qua n·ªôi dung Graphviz ƒë√£ ƒë∆∞·ª£c l∆∞u
        if graph_code_content.strip() and line.strip() in graph_code_content.split('\n'):
            continue
        
        # --------------------------------------------------------------------------------
        # X·ª¨ L√ù B·∫¢NG CH√çNH (HO·∫†T ƒê·ªòNG)
        # --------------------------------------------------------------------------------
        if re.match(r'\|.*Ho·∫°t ƒë·ªông c·ªßa gi√°o vi√™n.*\|.*Ho·∫°t ƒë·ªông c·ªßa h·ªçc sinh.*\|', line, re.IGNORECASE):
            is_in_table_section = True
            document.add_heading("III. C√°c ho·∫°t ƒë·ªông d·∫°y h·ªçc ch·ªß y·∫øu", level=2)
            table = document.add_table(rows=1, cols=2)
            table.style = 'Table Grid'
            table.autofit = False
            table.columns[0].width = Inches(3.5)
            table.columns[1].width = Inches(3.5)
            hdr_cells = table.rows[0].cells
            hdr_cells[0].text = "Ho·∫°t ƒë·ªông c·ªßa gi√°o vi√™n"
            hdr_cells[1].text = "Ho·∫°t ƒë·ªông c·ªßa h·ªçc sinh"
            current_row = table.add_row().cells
            continue

        if is_in_table_section and table is not None:
            if line.startswith('| :---'):
                continue

            # Ki·ªÉm tra k·∫øt th√∫c b·∫£ng
            if re.match(r'^[IVX]+\.\s|PH·∫¶N\s[IVX]+\.', line) or line.startswith('---'):
                is_in_table_section = False
                continue

            if line.startswith('|') and len(line.split('|')) >= 3:
                cells_content = [c.strip() for c in line.split('|')[1:-1]]

                if len(cells_content) == 2:
                    gv_content = cells_content[0].strip().replace('**', '')
                    hs_content = cells_content[1].strip().replace('**', '')

                    ACTIVITY_HEADERS_PATTERN = re.compile(r'^\s*(\d+\.\sHo·∫°t ƒë·ªông.*)\s*', re.IGNORECASE)
                    is_main_header = ACTIVITY_HEADERS_PATTERN.match(gv_content)
                    
                    if is_main_header:
                        title = gv_content.strip().strip('*').strip()
                        current_row = table.add_row().cells
                        current_row[0].merge(current_row[1])
                        p = current_row[0].add_paragraph(title)
                        p.runs[0].bold = True
                        current_row = table.add_row().cells 
                        continue
                    
                    else:
                        if current_row is None:
                            current_row = table.add_row().cells

                        for cell_index, cell_content in enumerate([gv_content, hs_content]):
                            cell_content_cleaned = clean_content(cell_content)
                            content_lines = cell_content_cleaned.split('\n')
                            
                            for content_line in content_lines:
                                content_line = content_line.strip()
                                if not content_line: continue
                                
                                if content_line.startswith('*') or content_line.startswith('-'):
                                    p = current_row[cell_index].add_paragraph(content_line.lstrip('*- ').strip(), style='List Bullet')
                                else:
                                    current_row[cell_index].add_paragraph(content_line)
                    continue

        # --------------------------------------------------------------------------------
        # X·ª¨ L√ù N·ªòI DUNG NGO√ÄI B·∫¢NG (I, II, IV, V, VI)
        # --------------------------------------------------------------------------------
        if re.match(r'^[IVX]+\.\s|PH·∫¶N\s[IVX]+\.', line):
            clean_line = line.strip().strip('**')
            
            # X·ª¨ L√ù PH·∫¶N VI: T·∫†O G·ª¢I √ù OUTLINE T·ª™ M√É GRAPHVIZ ƒê√É L∆ØU
            if clean_line.startswith("PH·∫¶N VI."):
                 document.add_heading("PH·∫¶N VI. G·ª¢I √ù S∆† ƒê·ªí T∆Ø DUY", level=2)
                 
                 if graph_code_content.strip():
                     # Regex ƒë·ªÉ t√¨m t·∫•t c·∫£ c√°c nh√£n (label)
                     # re.DOTALL ƒë·ªÉ kh·ªõp v·ªõi c√°c nh√£n c√≥ xu·ªëng d√≤ng (\n)
                     # L·ªçc b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát nh∆∞ **
                     labels = re.findall(r'label="([^"]*)"', graph_code_content, re.DOTALL)
                     
                     # L·ªçc b·ªè c√°c label r·ªóng v√† tr√πng l·∫∑p
                     unique_labels = sorted(list(set(label.strip() for label in labels if label.strip())))

                     if unique_labels:
                         document.add_paragraph("(D∆∞·ªõi ƒë√¢y l√† g·ª£i √Ω n·ªôi dung ch√≠nh (Key Ideas) ƒë∆∞·ª£c tr√≠ch xu·∫•t t·ª´ s∆° ƒë·ªì t∆∞ duy do AI t·∫°o. Gi√°o vi√™n c√≥ th·ªÉ d·ª±a v√†o ƒë√¢y ƒë·ªÉ v·∫Ω ho·∫∑c ch√®n h√¨nh ·∫£nh s∆° ƒë·ªì t·ª´ giao di·ªán web.)")
                         document.add_paragraph() 

                         for label in unique_labels:
                             # L·∫•y nh√£n, thay th·∫ø \n b·∫±ng d·∫•u g·∫°ch ƒë·∫ßu d√≤ng th·ª© c·∫•p
                             processed_label = label.replace(r'\n', '\n')
                             label_parts = processed_label.split('\n')
                             
                             main_label = label_parts[0].strip().replace('**', '') 
                             
                             # B·ªè qua nh√£n r·ªóng ho·∫∑c ch·ªâ l√† d·∫•u ch·∫•m ph·∫©y
                             if not main_label or main_label == ';': 
                                 continue
                             
                             # L·ªçc c√°c nh√£n th∆∞·ªùng l√† ti√™u ƒë·ªÅ chung (nh∆∞ T·ª± ch·ªß, H·ª£p t√°c, Ki·∫øn th·ª©c...)
                             if len(main_label) > 10: 
                                 # Nh√£n ch√≠nh (main bullet)
                                 p = document.add_paragraph(f"‚Ä¢ {main_label}", style='List Bullet')
                                 # p.paragraph_format.left_indent = Inches(0.25) # ƒê√£ c√≥ trong style List Bullet
                                     
                             # Th√™m c√°c d√≤ng ph·ª• (sub bullet)
                             for part in label_parts[1:]:
                                 part = part.strip().replace('**', '') 
                                 if part and len(part) > 3: # Lo·∫°i b·ªè c√°c ph·∫ßn qu√° ng·∫Øn
                                     p = document.add_paragraph(f"  - {part}")
                                     p.style = 'List Continue 2' # Style cho g·∫°ch ƒë·∫ßu d√≤ng c·∫•p 2
                                     p.paragraph_format.left_indent = Inches(0.5)

                     else:
                         document.add_paragraph("(AI ƒë√£ t·∫°o Graphviz nh∆∞ng kh√¥ng t√¨m th·∫•y nh√£n n·ªôi dung (label) ƒë·ªÉ tr√≠ch xu·∫•t g·ª£i √Ω. Vui l√≤ng ki·ªÉm tra l·∫°i y√™u c·∫ßu.)")
                     
                 else:
                     document.add_paragraph("(Kh√¥ng t√¨m th·∫•y m√£ ngu·ªìn Graphviz. C√≥ th·ªÉ y√™u c·∫ßu t·∫°o s∆° ƒë·ªì t∆∞ duy l√† 'KH√îNG'.)")
                 
                 continue 
            
            # Ti√™u ƒë·ªÅ c√°c ph·∫ßn kh√°c
            document.add_heading(clean_line, level=2)

        # C√°c ti√™u ƒë·ªÅ con (vd: 1. **V·ªÅ ki·∫øn th·ª©c:**)
        elif line.startswith('**') and line.endswith('**'):
            document.add_heading(line.strip('**').replace('**', ''), level=3)

        # Danh s√°ch g·∫°ch ƒë·∫ßu d√≤ng (List Bullet)
        elif line.startswith('*') or line.startswith('-'):
            document.add_paragraph(line.lstrip('*- ').strip().replace('**', ''), style='List Bullet')
        else:
            # VƒÉn b·∫£n th∆∞·ªùng (c≈©ng lo·∫°i b·ªè ** th·ª´a)
            document.add_paragraph(line.replace('**', ''))


    bio = BytesIO()
    document.save(bio)
    bio.seek(0)
    return bio
# -----------------------------------------------------------------
# 2. X√ÇY D·ª∞NG GIAO DI·ªÜN "CHAT BOX" (Web App) (GI·ªÆ NGUY√äN)
# -----------------------------------------------------------------

st.set_page_config(page_title="Tr·ª£ l√Ω So·∫°n gi√°o √°n AI", page_icon="ü§ñ")
st.title("ü§ñ Tr·ª£ l√Ω So·∫°n gi√°o √°n Ti·ªÉu h·ªçc")
st.write("S·∫£n ph·∫©m c·ªßa th·∫ßy gi√°o Ho√†ng Tr·ªçng Nghƒ©a.")
st.markdown("*(K·∫ø ho·∫°ch b√†i d·∫°y ƒë∆∞·ª£c bi√™n so·∫°n theo chu·∫©n Ch∆∞∆°ng tr√¨nh GDPT 2018)*")


# T·∫°o 5 √¥ nh·∫≠p li·ªáu cho 5 bi·∫øn s·ªë
mon_hoc = st.text_input("1. M√¥n h·ªçc:", placeholder="V√≠ d·ª•: Ti·∫øng Vi·ªát")
lop = st.text_input("2. L·ªõp:", placeholder="V√≠ d·ª•: 2")
bo_sach = st.text_input("3. B·ªô s√°ch:", placeholder="V√≠ d·ª•: C√°nh Di·ªÅu")
ten_bai = st.text_input("4. T√™n b√†i h·ªçc / Ch·ªß ƒë·ªÅ:", placeholder="V√≠ d·ª•: B√†i 2: Th·ªùi gian c·ªßa em")
yeu_cau = st.text_area("5. Y√™u c·∫ßu c·∫ßn ƒë·∫°t:", placeholder="ƒêi·ªÅn Y√™u c·∫ßu c·∫ßn ƒë·∫°t ...", height=150)

# 6. KHAI B√ÅO BI·∫æN CHO FILE UPLOADER
uploaded_file = st.file_uploader(
    "6. [T·∫£i L√™n] ·∫¢nh/PDF trang B√†i t·∫≠p SGK (T√πy ch·ªçn)",
    type=["pdf", "png", "jpg", "jpeg"]
)

# 7. KHAI B√ÅO BI·∫æN CHO CHECKBOX PHI·∫æU B√ÄI T·∫¨P
tao_phieu = st.checkbox("7. Y√™u c·∫ßu t·∫°o k√®m Phi·∫øu B√†i T·∫≠p", value=False)

# 8. <-- M·ªöI: Th√™m Checkbox cho S∆° ƒë·ªì t∆∞ duy
tao_mindmap = st.checkbox("8. Y√™u c·∫ßu t·∫°o S∆° ƒë·ªì t∆∞ duy tr·ª±c quan", value=True)

# N√∫t b·∫•m ƒë·ªÉ t·∫°o gi√°o √°n
if st.button("üöÄ T·∫°o Gi√°o √°n ngay!"):
    if not mon_hoc or not lop or not bo_sach or not ten_bai or not yeu_cau:
        st.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c·∫£ 5 th√¥ng tin!")
    else:
        with st.spinner("Tr·ª£ l√Ω AI ƒëang so·∫°n gi√°o √°n, vui l√≤ng ch·ªù trong gi√¢y l√°t..."):
            try:
                # Logic cho Bi·∫øn s·ªë T√πy ch·ªçn 1 (T·∫°o Phi·∫øu B√†i T·∫≠p)
                yeu_cau_phieu_value = "C√ì" if tao_phieu else "KH√îNG"

                # Logic cho Bi·∫øn s·ªë T√πy ch·ªçn 2 (S∆° ƒë·ªì t∆∞ duy)
                yeu_cau_mindmap_value = "C√ì" if tao_mindmap else "KH√îNG"


                # 1. Chu·∫©n b·ªã N·ªôi dung (Content List) cho AI (T√≠ch h·ª£p File v√† Text)
                content = []

                # 2. ƒêi·ªÅn Prompt (7 bi·∫øn s·ªë text)
                final_prompt = PROMPT_GOC.format(
                    mon_hoc=mon_hoc,
                    lop=lop,
                    bo_sach=bo_sach,
                    ten_bai=ten_bai,
                    yeu_cau=yeu_cau,
                    yeu_cau_phieu=yeu_cau_phieu_value,
                    yeu_cau_mindmap=yeu_cau_mindmap_value # <-- Th√™m bi·∫øn s·ªë 7
                )

                # 3. Logic cho Bi·∫øn s·ªë T√πy ch·ªçn 2 (T·∫£i File B√†i T·∫≠p)
                if uploaded_file is not None:
                    # X·ª≠ l√Ω PDF (n·∫øu c√≥)
                    if uploaded_file.type == "application/pdf":
                        st.error("L·ªói: T√≠nh nƒÉng t·∫£i l√™n file PDF ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£. Vui l√≤ng t·∫£i file ·∫£nh (PNG, JPG).")
                        st.stop() # D·ª´ng th·ª±c thi n·∫øu l√† PDF

                    # X·ª≠ l√Ω ·∫£nh
                    image = Image.open(uploaded_file)
                    content.append(image)

                # 4. Th√™m Prompt v√†o danh s√°ch Content (lu√¥n lu√¥n c√≥)
                content.append(final_prompt)

                # 5. G·ªçi AI v·ªõi danh s√°ch n·ªôi dung (content)
                response = model.generate_content(content)

                # 6. Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.balloons()
                st.subheader("üéâ Gi√°o √°n c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng:")

                # L√ÄM S·∫†CH K·∫æT QU·∫¢ ƒê·ªÇ CH·ªà HI·ªÇN TH·ªä GI√ÅO √ÅN
                full_text = response.text

                # L·ªçc s·∫°ch th·∫ª <br> (l·ªói c≈©)
                full_text = re.sub(r'<\s*br\s*\/?>', '\n', full_text, flags=re.IGNORECASE)

                start_index = full_text.find("I. Y√™u c·∫ßu c·∫ßn ƒë·∫°t")

                if start_index != -1:
                    cleaned_text = full_text[start_index:]
                else:
                    cleaned_text = full_text

                # L·ªåC "C√°ch ti·∫øn h√†nh:" RA KH·ªéI PH·∫¶N HI·ªÇN TH·ªä WEB
                cleaned_text_display = re.sub(r'C√°ch ti·∫øn h√†nh[:]*\s*', '', cleaned_text, flags=re.IGNORECASE)

                # --- KH·ªêI LOGIC HI·ªÇN TH·ªä S∆† ƒê·ªí T∆Ø DUY TR√äN WEB (GI·ªÆ NGUY√äN) ---
                start_tag = "[START_GRAPHVIZ]"
                end_tag = "[END_GRAPHVIZ]"

                if tao_mindmap and start_tag in cleaned_text_display:
                    try:
                        # T√°ch n·ªôi dung tr∆∞·ªõc v√† sau code Graphviz
                        before_graph = cleaned_text_display.split(start_tag)[0]
                        temp = cleaned_text_display.split(start_tag)[1]
                        graph_code = temp.split(end_tag)[0].strip()
                        after_graph = temp.split(end_tag)[1]

                        # Hi·ªÉn th·ªã
                        st.markdown(before_graph)
                        st.subheader("S∆° ƒë·ªì t∆∞ duy (Mind Map) - V·∫º TR·ª∞C TI·∫æP:")
                        if graph_code:
                            st.graphviz_chart(graph_code) # V·∫Ω s∆° ƒë·ªì
                        else:
                            st.warning("AI ƒë√£ t·∫°o th·∫ª tag nh∆∞ng m√£ ngu·ªìn Graphviz r·ªóng. Vui l√≤ng ch·∫°y l·∫°i.")
                        
                        # Lo·∫°i b·ªè ti√™u ƒë·ªÅ "PH·∫¶N VI." n·∫øu n√≥ n·∫±m trong `after_graph` v√¨ ƒë√£ v·∫Ω s∆° ƒë·ªì
                        after_graph = re.sub(r'PH·∫¶N VI\.\s*S∆† ƒê·ªí T∆Ø DUY.*', '', after_graph, flags=re.IGNORECASE)
                        st.markdown(after_graph)

                    except IndexError:
                        st.error("L·ªói khi tr√≠ch xu·∫•t m√£ ngu·ªìn Graphviz: Kh√¥ng t√¨m th·∫•y th·∫ª ƒë√≥ng `[END_GRAPHVIZ]`.")
                        st.markdown(cleaned_text_display)
                    except Exception as e:
                        st.error(f"L·ªói khi v·∫Ω s∆° ƒë·ªì t∆∞ duy: {e}")
                        st.markdown(cleaned_text_display)
                else:
                    st.markdown(cleaned_text_display)
                # --- K·∫æT TH√öC KH·ªêI LOGIC S∆† ƒê·ªí T∆Ø DUY ---


                # B·∫ÆT ƒê·∫¶U KH·ªêI CODE T·∫¢I XU·ªêNG WORD
                # H√†m create_word_document ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªÉ t·∫°o G·ª¢I √ù OUTLINE
                word_bytes = create_word_document(cleaned_text, ten_bai)


                st.download_button(
                    label="‚¨áÔ∏è T·∫£i v·ªÅ Gi√°o √°n (Word)",
                    data=word_bytes,
                    file_name=f"GA_{ten_bai.replace(' ', '_')}.docx",
                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                )
            except Exception as e:
                # X·ª≠ l√Ω l·ªói ƒë·∫∑c bi·ªát khi API Key b·ªã l·ªói (ch·ªâ c·∫ßn m·ªôt d√≤ng th√¥ng b√°o)
                if "API_KEY" in str(e):
                    st.error("L·ªói x√°c th·ª±c API: Vui l√≤ng ki·ªÉm tra l·∫°i 'GEMINI_API_KEY' trong Streamlit Secrets.")
                else:
                    st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra: {e}")
                    st.error("L·ªói n√†y c√≥ th·ªÉ do AI kh√¥ng t·∫°o ra ƒë√∫ng ƒë·ªãnh d·∫°ng ho·∫∑c c√≥ l·ªói k·∫øt n·ªëi.")

# B·∫ÆT ƒê·∫¶U PH·∫¶N SIDEBAR
st.sidebar.title("Gi·ªõi thi·ªáu")
st.sidebar.info(
"""
S·∫£n ph·∫©m c·ªßa Ho√†ng Tr·ªçng Nghƒ©a, Tr∆∞·ªùng Ti·ªÉu h·ªçc H·ªìng Gai. tham gia ng√†y h·ªôi "Nh√† gi√°o s√°ng t·∫°o v·ªõi c√¥ng ngh·ªá s·ªë v√† tr√≠ tu·ªá nh√¢n t·∫°o".

S·∫£n ph·∫©m ·ª©ng d·ª•ng AI ƒë·ªÉ t·ª± ƒë·ªông so·∫°n K·∫ø ho·∫°ch b√†i d·∫°y cho gi√°o vi√™n Ti·ªÉu h·ªçc theo ƒë√∫ng chu·∫©n Ch∆∞∆°ng tr√¨nh GDPT 2018.
"""
)
